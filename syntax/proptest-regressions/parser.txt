# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc a3c83e2243035b8c8557f9dd244d3703da2bf4d7d17bf9a2800b683123816154 # shrinks to e = Expr::Group { kind: Basic, inner: Expr::CharSelector(SingleCharSelector::Alt(CharacterAlternative { complemented: Uncomplemented, elements: [] })) }
cc 0893cf864103e2949ad718dc7c792d2e5dc24407552a5cc1092574fa352fb798 # shrinks to e = Expr::Alternation { cases: [] }
cc 11e742ac717a17ff21bb7c46decb4b78697afce77b9cb7c6f025e5a9387394e4 # shrinks to e = Expr::Concatenation { components: [Expr::SingleLiteral(SingleLiteral('¡'))] }
cc f4385907f85b30d5769304660f1198ac04308809b3de81fa162b057a4b0969e3 # shrinks to e = Expr::Concatenation { components: [Expr::Alternation { cases: [Expr::SingleLiteral(SingleLiteral('¡')), Expr::SingleLiteral(SingleLiteral(' '))] }, Expr::SingleLiteral(SingleLiteral('\0'))] }
cc db379829ed5439108f7556e1d1ef6568ca9383e508221dc9e48bce03744ee7bc # shrinks to e = Expr::Postfix { inner: Expr::SingleLiteral(SingleLiteral('¡')), op: Repeat(General(GeneralRepeatOperator { left: Some(RepeatNumeral(0)), right: None })) }
cc 78c98f8cc8b1de07d12f9fd03c2721ae0fd2ae06dc8799254e8dd1cde6772f4f # shrinks to e = Expr::Concatenation { components: [Expr::Concatenation { components: [Expr::SingleLiteral(SingleLiteral('¡')), Expr::SingleLiteral(SingleLiteral('A'))] }, Expr::SingleLiteral(SingleLiteral('A'))] }
cc fd652cd545bce990b5ae199ff180172ef65a9d0defc6a6fc17c18b25b73b320b # shrinks to e = Expr::Alternation { cases: [Expr::Alternation { cases: [Expr::SingleLiteral(SingleLiteral('\u{e000}')), Expr::SingleLiteral(SingleLiteral('a'))] }, Expr::SingleLiteral(SingleLiteral('¡'))] }
cc 43c8375daecc657275fabdcadb2e61db38bde8b42228d88175ad607139c8197f # shrinks to e = Expr::Postfix { inner: Expr::Alternation { cases: [Expr::SingleLiteral(SingleLiteral('¡')), Expr::SingleLiteral(SingleLiteral('¡'))] }, op: Simple(MaybeGreedyOperator { op: Star, greediness: Greedy }) }
cc e97b133a69de2fbea04e5c5653b7f488a7d63621feb6145545feabb3627cd5b4 # shrinks to e = Expr::Concatenation { components: [Expr::CharSelector(SingleCharSelector::Alt(CharacterAlternative { complemented: Uncomplemented, elements: [CharAltComponent::LiteralRange { left: SingleLiteral('^'), right: SingleLiteral('a') }] })), Expr::SingleLiteral(SingleLiteral('0'))] }
